package wordle.ui;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import wordle.domain.Record;
import wordle.domain.Tile;
import wordle.fixture.RecordFixture;
import wordle.fixture.ResultFixture;

class ConsoleOutputViewTest {

    private PrintStream standardOut;
    private OutputStream captor;

    private ConsoleOutputView consoleOutputView;

    @BeforeEach
    protected final void init() {
        standardOut = System.out;
        captor = new ByteArrayOutputStream();
        consoleOutputView = new ConsoleOutputView();
        System.setOut(new PrintStream(captor));
    }

    @AfterEach
    protected final void printOutput() {
        System.setOut(standardOut);
    }

    @Test
    void Recordë¥¼_ì¶œë ¥í• _ìˆ˜_ìžˆë‹¤() {
        Record record = createRecordFixture();

        consoleOutputView.showRecord(record);

        assertThat(captor.toString()).isEqualTo("""
                â¬œðŸŸ©â¬œðŸŸ¨â¬œ
                â¬œâ¬œâ¬œðŸŸ¨â¬œ
                â¬œðŸŸ©ðŸŸ¨ðŸŸ¨â¬œ
                â¬œðŸŸ©â¬œðŸŸ¨â¬œ
                â¬œâ¬œâ¬œâ¬œâ¬œ
                ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©
                """);
    }

    @Test
    void ê²Œìž„ì¢…ë£Œë¥¼_ì¶œë ¥í• _ìˆ˜_ìžˆë‹¤() {
        Record record = createRecordFixture();

        consoleOutputView.end(record);

        assertThat(captor.toString()).isEqualTo("""
                6/6
                                
                â¬œðŸŸ©â¬œðŸŸ¨â¬œ
                â¬œâ¬œâ¬œðŸŸ¨â¬œ
                â¬œðŸŸ©ðŸŸ¨ðŸŸ¨â¬œ
                â¬œðŸŸ©â¬œðŸŸ¨â¬œ
                â¬œâ¬œâ¬œâ¬œâ¬œ
                ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©
                """);
    }

    private static Record createRecordFixture() {
        return RecordFixture.create(
                ResultFixture.createResults(Tile.GRAY, Tile.GREEN, Tile.GRAY, Tile.YELLOW,
                        Tile.GRAY),
                ResultFixture.createResults(Tile.GRAY, Tile.GRAY, Tile.GRAY, Tile.YELLOW,
                        Tile.GRAY),
                ResultFixture.createResults(Tile.GRAY, Tile.GREEN, Tile.YELLOW, Tile.YELLOW,
                        Tile.GRAY),
                ResultFixture.createResults(Tile.GRAY, Tile.GREEN, Tile.GRAY, Tile.YELLOW,
                        Tile.GRAY),
                ResultFixture.createResults(Tile.GRAY, Tile.GRAY, Tile.GRAY, Tile.GRAY, Tile.GRAY),
                ResultFixture.createResults(Tile.GREEN, Tile.GREEN, Tile.GREEN, Tile.GREEN,
                        Tile.GREEN)
        );
    }
}